{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5d3a7a7b",
   "metadata": {
    "papermill": {
     "duration": 0.059866,
     "end_time": "2024-10-31T08:17:59.069646",
     "exception": false,
     "start_time": "2024-10-31T08:17:59.009780",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Wav2Lip\n",
    "[Wav2Lip](https://arxiv.org/pdf/2008.10010.pdf) is a GAN-based model for generating lip-synced facial animations. It consists of three main parts: a generator, a discriminator, and a pre-trained lip-sync expert.\n",
    "\n",
    "Given any input video and audio, Wav2Lip outputs a synchronized video. The generator includes a speech and identity encoder, which process the audio and video face, then combine to create the output frames. A visual quality discriminator ensures video clarity, while the pre-trained lip-sync expert further enhances synchronization accuracy.\n",
    "\n",
    "\n",
    "### Lip-Sync Expert\n",
    "Lip-sync Expert is based on **[SyncNet](https://www.robots.ox.ac.uk/~vgg/publications/2016/Chung16a/)**, determines audio-video synchronization. It uses two convolutional neural network encoders to extract features from speech (MFCC) and lip frames, mapping both to a shared feature space. Sync accuracy is measured via contrastive loss: smaller values indicate better sync, while larger values indicate a mismatch. For Wav2Lip, SyncNet’s architecture is deepened, with a residual structure added and mel-spectrograms replacing MFCC as the audio input.\n",
    "**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "73097a72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:17:59.173056Z",
     "iopub.status.busy": "2024-10-31T08:17:59.171193Z",
     "iopub.status.idle": "2024-10-31T08:17:59.174969Z",
     "shell.execute_reply": "2024-10-31T08:17:59.173967Z"
    },
    "papermill": {
     "duration": 0.06207,
     "end_time": "2024-10-31T08:17:59.175194",
     "exception": false,
     "start_time": "2024-10-31T08:17:59.113124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !pip install -r requirements.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc030125",
   "metadata": {
    "papermill": {
     "duration": 0.049183,
     "end_time": "2024-10-31T08:17:59.287002",
     "exception": false,
     "start_time": "2024-10-31T08:17:59.237819",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. Data set preparation and preprocessing\n",
    "\n",
    "**Download of LRS2 dataset**\n",
    "The download address of the data set required for the experiment is: <a href=\"http://www.robots.ox.ac.uk/~vgg/data/lip_reading/lrs2.html\">LRS2 dataset</a>, download the The data set requires permission from the BBC, and an application email needs to be sent to obtain the download key. For specific operations, please refer to the instructions on the webpage. After downloading, unzip the data set to the `mvlrs_v1/` folder in this directory, and move the file list files `train.txt, val.txt, test.txt` in LRS2 to the `filelists/` folder , the final directory structure of the data set is as follows.\n",
    "```\n",
    "data_root (mvlrs_v1)\n",
    "├── main, pretrain (we only use the data in the main folder)\n",
    "| ├── Folder list\n",
    "| │ ├── 5-digit video ID ending in .mp4\n",
    "```\n",
    "**Dataset Preprocessing**\n",
    "Most of the videos in the data set contain half-body or full-body images of people, and our model only requires a small part of the face. Therefore, in the preprocessing stage, we need to perform frame-framing operations on each video, extract each frame of the video, and then use the `face detection` toolkit to locate and crop the face position, retaining only the picture frames of the face. At the same time, we also need to separate the speech in each video."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a85cc6f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:17:59.370762Z",
     "iopub.status.busy": "2024-10-31T08:17:59.369842Z",
     "iopub.status.idle": "2024-10-31T08:17:59.372849Z",
     "shell.execute_reply": "2024-10-31T08:17:59.373501Z"
    },
    "papermill": {
     "duration": 0.04845,
     "end_time": "2024-10-31T08:17:59.373718",
     "exception": false,
     "start_time": "2024-10-31T08:17:59.325268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !python preprocess.py --data_root \"./mvlrs_v1/main\" --preprocessed_root \"./lrs2_preprocessed\" "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e54735d",
   "metadata": {
    "papermill": {
     "duration": 0.036638,
     "end_time": "2024-10-31T08:17:59.453647",
     "exception": false,
     "start_time": "2024-10-31T08:17:59.417009",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The directory structure under the preprocessed `lrs2_preprocessed/` folder is as follows\n",
    "```\n",
    "preprocessed_root (lrs2_preprocessed)\n",
    "├── Folder list\n",
    "| ├── Five-digit video ID\n",
    "| │ ├── *.jpg\n",
    "| │ ├── audio.wav\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdc4b4db",
   "metadata": {
    "papermill": {
     "duration": 0.03963,
     "end_time": "2024-10-31T08:17:59.532885",
     "exception": false,
     "start_time": "2024-10-31T08:17:59.493255",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3. Model training\n",
    "Model training is mainly divided into two parts:\n",
    "1. Training of Lip-Sync Expert Discriminator. The official pre-trained model [weight] is provided here (https://iiitaphyd-my.sharepoint.com/:u:/g/personal/radrabha_m_research_iiit_ac_in/EQRvmiZg-HRAjvI6zqN9eTEBP74KefynCwPWVmF57l-AYA?e=ZRPHKP)\n",
    "2. Training of Wav2Lip model.\n",
    "\n",
    "### 3.1 Pre-training Lip-Sync Expert\n",
    "#### 3.1.1. Network construction\n",
    "Above we have introduced the basic network structure of SyncNet, which mainly consists of a series of (Conv+BatchNorm+Relu). Here we have made some improvements to it and added a residual structure. In order to facilitate subsequent use, we have encapsulated (Conv+BatchNorm+Relu) and the residual module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "26da63a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:17:59.695124Z",
     "iopub.status.busy": "2024-10-31T08:17:59.694374Z",
     "iopub.status.idle": "2024-10-31T08:17:59.703458Z",
     "shell.execute_reply": "2024-10-31T08:17:59.703978Z",
     "shell.execute_reply.started": "2021-07-30T15:10:55.205557Z"
    },
    "papermill": {
     "duration": 0.132326,
     "end_time": "2024-10-31T08:17:59.704149",
     "exception": false,
     "start_time": "2024-10-31T08:17:59.571823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/wave2lip/wav2lip_homework\n"
     ]
    }
   ],
   "source": [
    "%cd ../input/wave2lip/wav2lip_homework"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be87eef8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:17:59.787496Z",
     "iopub.status.busy": "2024-10-31T08:17:59.786852Z",
     "iopub.status.idle": "2024-10-31T08:18:01.161985Z",
     "shell.execute_reply": "2024-10-31T08:18:01.161429Z",
     "shell.execute_reply.started": "2021-07-30T15:10:59.610288Z"
    },
    "papermill": {
     "duration": 1.418976,
     "end_time": "2024-10-31T08:18:01.162132",
     "exception": false,
     "start_time": "2024-10-31T08:17:59.743156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch import nn\n",
    "from torch.nn import functional as F\n",
    "\n",
    "class Conv2d(nn.Module):\n",
    "    def __init__(self, cin, cout, kernel_size, stride, padding, residual=False, *args, **kwargs):\n",
    "        super().__init__(*args, **kwargs)\n",
    "        ########TODO######################\n",
    "        # Complete the code according to the following network structure requirements\n",
    "        # self.conv_block: Sequential structure, Conv2d+BatchNorm\n",
    "        # self.act: relu activation function\n",
    "        self.conv_block = nn.Sequential(\n",
    "                            nn.Conv2d(cin, cout, kernel_size, stride, padding),\n",
    "                            nn.BatchNorm2d(cout)\n",
    "                            )\n",
    "        self.act = nn.ReLU()\n",
    "        self.residual = residual\n",
    "\n",
    "    def forward(self, x):\n",
    "        out = self.conv_block(x)\n",
    "        if self.residual:\n",
    "            out += x\n",
    "        return self.act(out)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ab7be7e",
   "metadata": {
    "papermill": {
     "duration": 0.037536,
     "end_time": "2024-10-31T08:18:01.237087",
     "exception": false,
     "start_time": "2024-10-31T08:18:01.199551",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### SyncNet mainly consists of two parts:\n",
    "Face_encoder and Audio_encoder. Each part is composed of multiple Conv2d modules, which implement downsampling and feature extraction of the input by specifying the size of the convolution kernel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8a7cf2e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:18:01.335323Z",
     "iopub.status.busy": "2024-10-31T08:18:01.334341Z",
     "iopub.status.idle": "2024-10-31T08:18:01.337223Z",
     "shell.execute_reply": "2024-10-31T08:18:01.336584Z",
     "shell.execute_reply.started": "2021-07-30T15:11:04.53338Z"
    },
    "papermill": {
     "duration": 0.063145,
     "end_time": "2024-10-31T08:18:01.337357",
     "exception": false,
     "start_time": "2024-10-31T08:18:01.274212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch import nn\n",
    "from torch.nn import functional as F\n",
    "\n",
    "class SyncNet_color(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(SyncNet_color, self).__init__()\n",
    "        \n",
    "        ################TODO###################\n",
    "#According to the network structure diagram provided above, complete the parameters of the convolutional network below.\n",
    "\n",
    "        self.face_encoder = nn.Sequential(\n",
    "            Conv2d(15, 32, kernel_size=(7, 7), stride=1, padding=3),\n",
    "\n",
    "            Conv2d(32, 64, kernel_size=5, stride=(1, 2), padding=1),\n",
    "            Conv2d(64, 64, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(64, 64, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(64, 128, kernel_size=3, stride=2, padding=1),\n",
    "            Conv2d(128, 128, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(128, 128, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(128, 128, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(128, 256, kernel_size=3, stride=2, padding=1),\n",
    "            Conv2d(256, 256, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(256, 256, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(256, 512, kernel_size=3, stride=2, padding=1),\n",
    "            Conv2d(512, 512, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(512, 512, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(512, 512, kernel_size=3, stride=2, padding=1),\n",
    "            Conv2d(512, 512, kernel_size=3, stride=1, padding=0),\n",
    "            Conv2d(512, 512, kernel_size=1, stride=1, padding=0),)\n",
    "\n",
    "        self.audio_encoder = nn.Sequential(\n",
    "            Conv2d(1, 32, kernel_size=3, stride=1, padding=1),\n",
    "            Conv2d(32, 32, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(32, 32, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(32, 64, kernel_size=3, stride=(3, 1), padding=1),\n",
    "            Conv2d(64, 64, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(64, 64, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(64, 128, kernel_size=3, stride=3, padding=1),\n",
    "            Conv2d(128, 128, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(128, 128, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(128, 256, kernel_size=3, stride=(3, 2), padding=1),\n",
    "            Conv2d(256, 256, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(256, 256, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(256, 512, kernel_size=3, stride=1, padding=0),\n",
    "            Conv2d(512, 512, kernel_size=1, stride=1, padding=0),)\n",
    "\n",
    "    def forward(self, audio_sequences, face_sequences): # audio_sequences := (B, dim, T)\n",
    "        \n",
    "        ########################TODO######################\n",
    "        # Forward propagation\n",
    "        face_embedding = self.face_encoder(face_sequences)\n",
    "        audio_embedding = self.audio_encoder(audio_sequences)\n",
    "\n",
    "        audio_embedding = audio_embedding.view(audio_embedding.size(0), -1)\n",
    "        face_embedding = face_embedding.view(face_embedding.size(0), -1)\n",
    "\n",
    "        audio_embedding = F.normalize(audio_embedding, p=2, dim=1)\n",
    "        face_embedding = F.normalize(face_embedding, p=2, dim=1)\n",
    "\n",
    "\n",
    "        return audio_embedding, face_embedding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0a4db68d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:18:01.418084Z",
     "iopub.status.busy": "2024-10-31T08:18:01.417444Z",
     "iopub.status.idle": "2024-10-31T08:18:03.490122Z",
     "shell.execute_reply": "2024-10-31T08:18:03.489447Z",
     "shell.execute_reply.started": "2021-07-30T15:11:11.303526Z"
    },
    "papermill": {
     "duration": 2.115542,
     "end_time": "2024-10-31T08:18:03.490263",
     "exception": false,
     "start_time": "2024-10-31T08:18:01.374721",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from os.path import dirname, join, basename, isfile\n",
    "from tqdm import tqdm\n",
    "\n",
    "from models import SyncNet_color as SyncNet\n",
    "import audio\n",
    "\n",
    "import torch\n",
    "from torch import nn\n",
    "from torch import optim\n",
    "import torch.backends.cudnn as cudnn\n",
    "from torch.utils import data as data_utils\n",
    "import numpy as np\n",
    "\n",
    "from glob import glob\n",
    "\n",
    "import os, random, cv2, argparse\n",
    "from hparams import hparams, get_image_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a674e7db",
   "metadata": {
    "papermill": {
     "duration": 0.036853,
     "end_time": "2024-10-31T08:18:03.565511",
     "exception": false,
     "start_time": "2024-10-31T08:18:03.528658",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3.1.2 Defining Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c7e7b66a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:18:03.691829Z",
     "iopub.status.busy": "2024-10-31T08:18:03.691114Z",
     "iopub.status.idle": "2024-10-31T08:18:03.694934Z",
     "shell.execute_reply": "2024-10-31T08:18:03.694302Z",
     "shell.execute_reply.started": "2021-07-30T15:11:14.929415Z"
    },
    "papermill": {
     "duration": 0.092005,
     "end_time": "2024-10-31T08:18:03.695075",
     "exception": false,
     "start_time": "2024-10-31T08:18:03.603070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "use_cuda: True\n"
     ]
    }
   ],
   "source": [
    "global_step = 0 #Starting step\n",
    "global_epoch = 0 #Starting epoch\n",
    "use_cuda = torch.cuda.is_available()#Training device cpu or gpu\n",
    "print('use_cuda: {}'.format(use_cuda))\n",
    "\n",
    "syncnet_T = 5 ## Select 200ms video clips for training each time. The fps of the video is 25, so the number of frames corresponding to 200ms is: 25*0.2=5 frames\n",
    "syncnet_mel_step_size = 16 # The length of the mel-spectrogram feature of the sound corresponding to 200ms is 16.\n",
    "data_root=\"/kaggle/input/wav2lippreprocessed/lrs2_preprocessed\" #The location of the data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4d71e7a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:18:03.789706Z",
     "iopub.status.busy": "2024-10-31T08:18:03.789037Z",
     "iopub.status.idle": "2024-10-31T08:18:03.791826Z",
     "shell.execute_reply": "2024-10-31T08:18:03.791229Z",
     "shell.execute_reply.started": "2021-07-30T15:18:29.73854Z"
    },
    "papermill": {
     "duration": 0.059276,
     "end_time": "2024-10-31T08:18:03.791963",
     "exception": false,
     "start_time": "2024-10-31T08:18:03.732687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Dataset(object):\n",
    "    def __init__(self, split):\n",
    "        self.all_videos = get_image_list(data_root, split)\n",
    "\n",
    "    def get_frame_id(self, frame):\n",
    "        return int(basename(frame).split('.')[0])\n",
    "\n",
    "    def get_window(self, start_frame):\n",
    "        start_id = self.get_frame_id(start_frame)\n",
    "        vidname = dirname(start_frame)\n",
    "\n",
    "        window_fnames = []\n",
    "        for frame_id in range(start_id, start_id + syncnet_T):\n",
    "            frame = join(vidname, '{}.jpg'.format(frame_id))\n",
    "            if not isfile(frame):\n",
    "                return None\n",
    "            window_fnames.append(frame)\n",
    "        return window_fnames\n",
    "\n",
    "    def crop_audio_window(self, spec, start_frame):\n",
    "        # num_frames = (T x hop_size * fps) / sample_rate\n",
    "        start_frame_num = self.get_frame_id(start_frame)\n",
    "        start_idx = int(80. * (start_frame_num / float(hparams.fps)))\n",
    "\n",
    "        end_idx = start_idx + syncnet_mel_step_size\n",
    "\n",
    "        return spec[start_idx : end_idx, :]\n",
    "\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.all_videos)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        \"\"\"\n",
    "        return: x,mel,y\n",
    "        x: Five pictures of lips\n",
    "        mel: mel spectrogram of the corresponding voice\n",
    "        t: synchronous or not synchronized\n",
    "        \n",
    "        \"\"\"\n",
    "        while 1:\n",
    "            idx = random.randint(0, len(self.all_videos) - 1)\n",
    "            vidname = self.all_videos[idx]\n",
    "\n",
    "            img_names = list(glob(join(vidname, '*.jpg')))\n",
    "            if len(img_names) <= 3 * syncnet_T:\n",
    "                continue\n",
    "            img_name = random.choice(img_names)\n",
    "            wrong_img_name = random.choice(img_names)\n",
    "            while wrong_img_name == img_name:\n",
    "                wrong_img_name = random.choice(img_names)\n",
    "            \n",
    "            \n",
    "            #Randomly decide whether to generate negative samples or positive samples\n",
    "            if random.choice([True, False]):\n",
    "                y = torch.ones(1).float()\n",
    "                chosen = img_name\n",
    "            else:\n",
    "                y = torch.zeros(1).float()\n",
    "                chosen = wrong_img_name\n",
    "\n",
    "            window_fnames = self.get_window(chosen)\n",
    "            if window_fnames is None:\n",
    "                continue\n",
    "\n",
    "            window = []\n",
    "            all_read = True\n",
    "            for fname in window_fnames:\n",
    "                img = cv2.imread(fname)\n",
    "                if img is None:\n",
    "                    all_read = False\n",
    "                    break\n",
    "                try:\n",
    "                    img = cv2.resize(img, (hparams.img_size, hparams.img_size))\n",
    "                except Exception as e:\n",
    "                    all_read = False\n",
    "                    break\n",
    "\n",
    "                window.append(img)\n",
    "\n",
    "            if not all_read: continue\n",
    "\n",
    "            try:\n",
    "                wavpath = join(vidname, \"audio.wav\")\n",
    "                wav = audio.load_wav(wavpath, hparams.sample_rate)\n",
    "\n",
    "                orig_mel = audio.melspectrogram(wav).T\n",
    "            except Exception as e:\n",
    "                continue\n",
    "\n",
    "            mel = self.crop_audio_window(orig_mel.copy(), img_name)\n",
    "\n",
    "            if (mel.shape[0] != syncnet_mel_step_size):\n",
    "                continue\n",
    "\n",
    "            # H x W x 3 * T\n",
    "            x = np.concatenate(window, axis=2) / 255.\n",
    "            x = x.transpose(2, 0, 1)\n",
    "            x = x[:, x.shape[1]//2:]\n",
    "\n",
    "            x = torch.FloatTensor(x)\n",
    "            mel = torch.FloatTensor(mel.T).unsqueeze(0)\n",
    "\n",
    "            return x, mel, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5ba393ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:18:03.870188Z",
     "iopub.status.busy": "2024-10-31T08:18:03.869597Z",
     "iopub.status.idle": "2024-10-31T08:18:04.113378Z",
     "shell.execute_reply": "2024-10-31T08:18:04.114465Z",
     "shell.execute_reply.started": "2021-07-30T15:18:33.470434Z"
    },
    "papermill": {
     "duration": 0.285581,
     "end_time": "2024-10-31T08:18:04.114800",
     "exception": false,
     "start_time": "2024-10-31T08:18:03.829219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([15, 48, 96])\n",
      "torch.Size([1, 80, 16])\n",
      "torch.Size([1])\n"
     ]
    }
   ],
   "source": [
    "ds=Dataset(\"train\")\n",
    "x,mel,t=ds[0]\n",
    "print(x.shape)\n",
    "print(mel.shape)\n",
    "print(t.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "10390b48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:18:04.270035Z",
     "iopub.status.busy": "2024-10-31T08:18:04.269328Z",
     "iopub.status.idle": "2024-10-31T08:18:04.409487Z",
     "shell.execute_reply": "2024-10-31T08:18:04.408951Z",
     "shell.execute_reply.started": "2021-07-30T15:18:36.933382Z"
    },
    "papermill": {
     "duration": 0.212352,
     "end_time": "2024-10-31T08:18:04.409630",
     "exception": false,
     "start_time": "2024-10-31T08:18:04.197278",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x79b9a3bdd550>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.imshow(mel[0].numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fc625fe0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:18:04.516840Z",
     "iopub.status.busy": "2024-10-31T08:18:04.515955Z",
     "iopub.status.idle": "2024-10-31T08:18:04.627036Z",
     "shell.execute_reply": "2024-10-31T08:18:04.626465Z",
     "shell.execute_reply.started": "2021-07-30T15:18:56.039099Z"
    },
    "papermill": {
     "duration": 0.177603,
     "end_time": "2024-10-31T08:18:04.627179",
     "exception": false,
     "start_time": "2024-10-31T08:18:04.449576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x79b9a3aee210>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x[:3,:,:].transpose(0,2).numpy())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2a92331",
   "metadata": {
    "papermill": {
     "duration": 0.041026,
     "end_time": "2024-10-31T08:18:04.710490",
     "exception": false,
     "start_time": "2024-10-31T08:18:04.669464",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3.2 Training\n",
    "\n",
    "Use cosine_loss as loss function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0dc6143b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:18:04.797865Z",
     "iopub.status.busy": "2024-10-31T08:18:04.796998Z",
     "iopub.status.idle": "2024-10-31T08:18:04.799833Z",
     "shell.execute_reply": "2024-10-31T08:18:04.799228Z",
     "shell.execute_reply.started": "2021-07-30T15:19:00.674203Z"
    },
    "papermill": {
     "duration": 0.048608,
     "end_time": "2024-10-31T08:18:04.799973",
     "exception": false,
     "start_time": "2024-10-31T08:18:04.751365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Definition of loss function\n",
    "logloss = nn.BCELoss() # Cross entropy loss\n",
    "def cosine_loss(a, v, y):#Cosine similarity loss\n",
    "    \"\"\"\n",
    "    a: output of audio_encoder\n",
    "    v: output of video face_encoder\n",
    "    y: the true value of whether to synchronize\n",
    "    \"\"\"\n",
    "    d = nn.functional.cosine_similarity(a, v)\n",
    "    loss = logloss(d.unsqueeze(1), y)\n",
    "\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "81360784",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:18:04.901229Z",
     "iopub.status.busy": "2024-10-31T08:18:04.900586Z",
     "iopub.status.idle": "2024-10-31T08:18:04.903392Z",
     "shell.execute_reply": "2024-10-31T08:18:04.902771Z",
     "shell.execute_reply.started": "2021-07-30T15:19:09.309393Z"
    },
    "papermill": {
     "duration": 0.062539,
     "end_time": "2024-10-31T08:18:04.903515",
     "exception": false,
     "start_time": "2024-10-31T08:18:04.840976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train(device, model, train_data_loader, test_data_loader, optimizer,\n",
    "          checkpoint_dir=None, checkpoint_interval=None, nepochs=None):\n",
    "\n",
    "    global global_step, global_epoch\n",
    "    resumed_step = global_step\n",
    "    \n",
    "    while global_epoch < nepochs:\n",
    "        running_loss = 0.\n",
    "        prog_bar = tqdm(enumerate(train_data_loader))\n",
    "        for step, (x, mel, y) in prog_bar:\n",
    "            model.train()\n",
    "            optimizer.zero_grad()\n",
    "\n",
    "            #####TODO###########\n",
    "            ####################\n",
    "            #Complete model training\n",
    "            x = x.to(device)\n",
    "\n",
    "            mel = mel.to(device)\n",
    "\n",
    "            a, v = model(mel, x)\n",
    "            y = y.to(device)\n",
    "\n",
    "            loss = cosine_loss(a, v, y)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "                \n",
    "            \n",
    "\n",
    "            global_step += 1\n",
    "            cur_session_steps = global_step - resumed_step\n",
    "            running_loss += loss.item()\n",
    "\n",
    "            if global_step == 1 or global_step % checkpoint_interval == 0:\n",
    "                save_checkpoint(\n",
    "                    model, optimizer, global_step, checkpoint_dir, global_epoch)\n",
    "\n",
    "            if global_step % hparams.syncnet_eval_interval == 0:\n",
    "                with torch.no_grad():\n",
    "                    eval_model(test_data_loader, global_step, device, model, checkpoint_dir)\n",
    "\n",
    "            prog_bar.set_description('Epoch: {} Loss: {}'.format(global_epoch, running_loss / (step + 1)))\n",
    "\n",
    "        global_epoch += 1\n",
    "\n",
    "def eval_model(test_data_loader, global_step, device, model, checkpoint_dir):\n",
    "    #Evaluate on the test set\n",
    "    eval_steps = 1400\n",
    "    print('Evaluating for {} steps'.format(eval_steps))\n",
    "    losses = []\n",
    "    while 1:\n",
    "        for step, (x, mel, y) in enumerate(test_data_loader):\n",
    "\n",
    "            model.eval()\n",
    "\n",
    "            # Transform data to CUDA device\n",
    "            x = x.to(device)\n",
    "\n",
    "            mel = mel.to(device)\n",
    "\n",
    "            a, v = model(mel, x)\n",
    "            y = y.to(device)\n",
    "\n",
    "            loss = cosine_loss(a, v, y)\n",
    "            losses.append(loss.item())\n",
    "\n",
    "            if step > eval_steps: break\n",
    "\n",
    "        averaged_loss = sum(losses) / len(losses)\n",
    "        print(averaged_loss)\n",
    "\n",
    "        return\n",
    "\n",
    "latest_checkpoint_path = ''\n",
    "def save_checkpoint(model, optimizer, step, checkpoint_dir, epoch):\n",
    "    #Save training results checkpoint\n",
    "    global latest_checkpoint_path\n",
    "    \n",
    "    checkpoint_path = join(\n",
    "        checkpoint_dir, \"checkpoint_step{:09d}.pth\".format(global_step))\n",
    "    optimizer_state = optimizer.state_dict() if hparams.save_optimizer_state else None\n",
    "    torch.save({\n",
    "        \"state_dict\": model.state_dict(),\n",
    "        \"optimizer\": optimizer_state,\n",
    "        \"global_step\": step,\n",
    "        \"global_epoch\": epoch,\n",
    "    }, checkpoint_path)\n",
    "    latest_checkpoint_path = checkpoint_path\n",
    "    print(\"Saved checkpoint:\", checkpoint_path)\n",
    "\n",
    "def _load(checkpoint_path):\n",
    "    if use_cuda:\n",
    "        checkpoint = torch.load(checkpoint_path)\n",
    "    else:\n",
    "        checkpoint = torch.load(checkpoint_path,\n",
    "                                map_location=lambda storage, loc: storage)\n",
    "    return checkpoint\n",
    "\n",
    "def load_checkpoint(path, model, optimizer, reset_optimizer=False):\n",
    "    #Read the saved information of the specified checkpoint\n",
    "    global global_step\n",
    "    global global_epoch\n",
    "\n",
    "    print(\"Load checkpoint from: {}\".format(path))\n",
    "    checkpoint = _load(path)\n",
    "    model.load_state_dict(checkpoint[\"state_dict\"])\n",
    "    if not reset_optimizer:\n",
    "        optimizer_state = checkpoint[\"optimizer\"]\n",
    "        if optimizer_state is not None:\n",
    "            print(\"Load optimizer state from {}\".format(path))\n",
    "            optimizer.load_state_dict(checkpoint[\"optimizer\"])\n",
    "    global_step = checkpoint[\"global_step\"]\n",
    "    global_epoch = checkpoint[\"global_epoch\"]\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae4b0b82",
   "metadata": {
    "papermill": {
     "duration": 0.040694,
     "end_time": "2024-10-31T08:18:04.985286",
     "exception": false,
     "start_time": "2024-10-31T08:18:04.944592",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Start training below. \n",
    "The final Loss reference value is about 0.20. At this time, the model can achieve better discrimination results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "82ebdf8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T08:18:05.076733Z",
     "iopub.status.busy": "2024-10-31T08:18:05.076107Z",
     "iopub.status.idle": "2024-10-31T10:29:10.318566Z",
     "shell.execute_reply": "2024-10-31T10:29:10.318038Z",
     "shell.execute_reply.started": "2021-07-30T15:19:14.2154Z"
    },
    "papermill": {
     "duration": 7865.29249,
     "end_time": "2024-10-31T10:29:10.318725",
     "exception": false,
     "start_time": "2024-10-31T08:18:05.026235",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total trainable params 16435072\n",
      "Load checkpoint from: /kaggle/input/wav2lip24epoch/expert_checkpoints/checkpoint_step000060000.pth\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch: 20 Loss: 0.48509527195706625: : 2865it [19:31,  2.44it/s]\n",
      "Epoch: 21 Loss: 0.48243958506388607: : 2865it [18:54,  2.53it/s]\n",
      "Epoch: 22 Loss: 0.4792684836641448: : 2865it [18:30,  2.58it/s]\n",
      "Epoch: 23 Loss: 0.4742409468355172: : 1404it [09:08,  2.24it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved checkpoint: /kaggle/working/expert_checkpoints/checkpoint_step000070000.pth\n",
      "Evaluating for 1400 steps\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch: 23 Loss: 0.47431369839106313: : 1406it [09:30,  4.87s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.44587873229209113\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch: 23 Loss: 0.4736502659414451: : 2865it [18:42,  2.55it/s]\n",
      "Epoch: 24 Loss: 0.47131751635311786: : 2865it [18:20,  2.60it/s]\n",
      "Epoch: 25 Loss: 0.46738735726054426: : 2865it [18:10,  2.63it/s]\n",
      "Epoch: 26 Loss: 0.46503586629481874: : 2809it [18:09,  2.29it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved checkpoint: /kaggle/working/expert_checkpoints/checkpoint_step000080000.pth\n",
      "Evaluating for 1400 steps\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch: 26 Loss: 0.46505200048648176: : 2810it [18:32,  7.11s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.41701851697529063\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch: 26 Loss: 0.46496839194605694: : 2865it [18:44,  2.55it/s]\n"
     ]
    }
   ],
   "source": [
    "checkpoint_dir = \"/kaggle/working/expert_checkpoints/\" #Specify the location where checkpoints are stored\n",
    "checkpoint_path = '/kaggle/input/wav2lip24epoch/expert_checkpoints/checkpoint_step000060000.pth'\n",
    "# Specify the path to load the checkpoint. It is not required for the first training. If you want to resume training from a certain checkpoint later, you can specify it.\n",
    "\n",
    "if not os.path.exists(checkpoint_dir): os.mkdir(checkpoint_dir)\n",
    "\n",
    "# Dataset and Dataloader setup\n",
    "train_dataset = Dataset('train')\n",
    "test_dataset = Dataset('val')\n",
    "\n",
    "############TODO#########\n",
    "#####Train Dataloader and Test Dataloader\n",
    "#### For specific bacthsize and other parameters, please refer to the hparams.py file\n",
    "train_data_loader = data_utils.DataLoader(\n",
    "    train_dataset, batch_size=hparams.batch_size, shuffle=True,\n",
    "    num_workers=hparams.num_workers)\n",
    "\n",
    "test_data_loader = data_utils.DataLoader(\n",
    "    test_dataset, batch_size=hparams.batch_size,\n",
    "    num_workers=8)\n",
    "\n",
    "device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n",
    "\n",
    "# Model\n",
    "#####Define the SynNet model and load it to the specified device\n",
    "model = SyncNet().to(device)\n",
    "print('total trainable params {}'.format(sum(p.numel() for p in model.parameters() if p.requires_grad)))\n",
    "\n",
    "####Define the optimizer, use adam, lr refer to the hparams.py file\n",
    "optimizer = optim.Adam([p for p in model.parameters() if p.requires_grad],\n",
    "                       lr=1e-5)\n",
    "\n",
    "if checkpoint_path is not None:\n",
    "    load_checkpoint(checkpoint_path, model, optimizer, reset_optimizer=True)\n",
    "\n",
    "train(device, model, train_data_loader, test_data_loader, optimizer,\n",
    "      checkpoint_dir=checkpoint_dir,\n",
    "      checkpoint_interval=hparams.syncnet_checkpoint_interval,\n",
    "      nepochs=27)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a303ac0",
   "metadata": {
    "papermill": {
     "duration": 13.134709,
     "end_time": "2024-10-31T10:29:36.683154",
     "exception": false,
     "start_time": "2024-10-31T10:29:23.548445",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3.3 Training Wav2Lip\n",
    "Pre-trained model [weight](https://iiitaphyd-my.sharepoint.com/:u:/g/personal/radrabha_m_research_iiit_ac_in/EdjI7bZlgApMqsVoEUUXpLsBxqXbn5z8VTmoxp55YNDcIA?e=n9ljGW)\n",
    "#### 3.3.1. Definition of model\n",
    "The generator of the wav2lip model first downsamples the input and then upsamples it back to its original size. For convenience, we have encapsulated the reused modules."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1d5f13b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T10:30:02.803269Z",
     "iopub.status.busy": "2024-10-31T10:30:02.802625Z",
     "iopub.status.idle": "2024-10-31T10:30:02.805781Z",
     "shell.execute_reply": "2024-10-31T10:30:02.805253Z",
     "shell.execute_reply.started": "2021-07-25T08:00:59.2366Z"
    },
    "papermill": {
     "duration": 13.046611,
     "end_time": "2024-10-31T10:30:02.805932",
     "exception": false,
     "start_time": "2024-10-31T10:29:49.759321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class nonorm_Conv2d(nn.Module): #No need to perform norm convolution\n",
    "    def __init__(self, cin, cout, kernel_size, stride, padding, residual=False, *args, **kwargs):\n",
    "        super().__init__(*args, **kwargs)\n",
    "        self.conv_block = nn.Sequential(\n",
    "                            nn.Conv2d(cin, cout, kernel_size, stride, padding),\n",
    "                            )\n",
    "        self.act = nn.LeakyReLU(0.01, inplace=True)\n",
    "\n",
    "    def forward(self, x):\n",
    "        out = self.conv_block(x)\n",
    "        return self.act(out)\n",
    "\n",
    "class Conv2dTranspose(nn.Module):# Deconvolution, upsampling\n",
    "    def __init__(self, cin, cout, kernel_size, stride, padding, output_padding=0, *args, **kwargs):\n",
    "        super().__init__(*args, **kwargs)\n",
    "        ############TODO###########\n",
    "        ## Complete self.conv_block: a Sequential structure composed of deconvolution and batchnorm\n",
    "        self.conv_block = nn.Sequential(\n",
    "                            nn.ConvTranspose2d(cin, cout, kernel_size, stride, padding, output_padding),\n",
    "                            nn.BatchNorm2d(cout)\n",
    "                            )\n",
    "        self.act = nn.ReLU()\n",
    "\n",
    "    def forward(self, x):\n",
    "        out = self.conv_block(x)\n",
    "        return self.act(out)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fc8b27a",
   "metadata": {
    "papermill": {
     "duration": 13.113645,
     "end_time": "2024-10-31T10:30:28.961091",
     "exception": false,
     "start_time": "2024-10-31T10:30:15.847446",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Generator\n",
    "It consists of two encoders: **face_encoder** and **audio_encoder**, and one **decoder**:\n",
    "\n",
    "**face_decoder**. The face encoder and audio encoder respectively reduce the dimensionality of the input face and voice features to obtain the features of (1, 1, 512), and concatenate the two and send them to the face decoder for upsampling, and finally obtain and input Face images of the same size."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2f535d3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T10:30:55.139446Z",
     "iopub.status.busy": "2024-10-31T10:30:55.138724Z",
     "iopub.status.idle": "2024-10-31T10:30:55.178077Z",
     "shell.execute_reply": "2024-10-31T10:30:55.177443Z",
     "shell.execute_reply.started": "2021-07-25T08:00:04.850039Z"
    },
    "papermill": {
     "duration": 13.14029,
     "end_time": "2024-10-31T10:30:55.178208",
     "exception": false,
     "start_time": "2024-10-31T10:30:42.037918",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "#####################TODO############################\n",
    "#Complete the parameters of the network based on the network model diagram printed below\n",
    "\n",
    "class Wav2Lip(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Wav2Lip, self).__init__()\n",
    "\n",
    "        self.face_encoder_blocks = nn.ModuleList([\n",
    "            nn.Sequential(Conv2d(6, 16, kernel_size=7, stride=1, padding=3)), # 96,96\n",
    "\n",
    "            nn.Sequential(Conv2d(16, 32, kernel_size=3, stride=2, padding=1), # 48,48\n",
    "            Conv2d(32, 32, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(32, 32, kernel_size=3, stride=1, padding=1, residual=True)),\n",
    "\n",
    "            nn.Sequential(Conv2d(32, 64, kernel_size=3, stride=2, padding=1),    # 24,24\n",
    "            Conv2d(64, 64, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(64, 64, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(64, 64, kernel_size=3, stride=1, padding=1, residual=True)),\n",
    "\n",
    "            nn.Sequential(Conv2d(64, 128, kernel_size=3, stride=2, padding=1),   # 12,12\n",
    "            Conv2d(128, 128, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(128, 128, kernel_size=3, stride=1, padding=1, residual=True)),\n",
    "\n",
    "            nn.Sequential(Conv2d(128, 256, kernel_size=3, stride=2, padding=1),       # 6,6\n",
    "            Conv2d(256, 256, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(256, 256, kernel_size=3, stride=1, padding=1, residual=True)),\n",
    "\n",
    "            nn.Sequential(Conv2d(256, 512, kernel_size=3, stride=2, padding=1),     # 3,3\n",
    "            Conv2d(512, 512, kernel_size=3, stride=1, padding=1, residual=True),),\n",
    "            \n",
    "            nn.Sequential(Conv2d(512, 512, kernel_size=3, stride=1, padding=0),     # 1, 1\n",
    "            Conv2d(512, 512, kernel_size=1, stride=1, padding=0)),])\n",
    "\n",
    "        self.audio_encoder = nn.Sequential(\n",
    "            Conv2d(1, 32, kernel_size=3, stride=1, padding=1),\n",
    "            Conv2d(32, 32, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(32, 32, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(32, 64, kernel_size=3, stride=(3, 1), padding=1),\n",
    "            Conv2d(64, 64, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(64, 64, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(64, 128, kernel_size=3, stride=3, padding=1),\n",
    "            Conv2d(128, 128, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(128, 128, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(128, 256, kernel_size=3, stride=(3, 2), padding=1),\n",
    "            Conv2d(256, 256, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "\n",
    "            Conv2d(256, 512, kernel_size=3, stride=1, padding=0),\n",
    "            Conv2d(512, 512, kernel_size=1, stride=1, padding=0),)\n",
    "\n",
    "        self.face_decoder_blocks = nn.ModuleList([\n",
    "            nn.Sequential(Conv2d(512, 512, kernel_size=1, stride=1, padding=0),),\n",
    "\n",
    "            nn.Sequential(Conv2dTranspose(1024, 512, kernel_size=3, stride=1, padding=0), # 3,3\n",
    "            Conv2d(512, 512, kernel_size=3, stride=1, padding=1, residual=True),),\n",
    "\n",
    "            nn.Sequential(Conv2dTranspose(1024, 512, kernel_size=3, stride=2, padding=1, output_padding=1),\n",
    "            Conv2d(512, 512, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(512, 512, kernel_size=3, stride=1, padding=1, residual=True),), # 6, 6\n",
    "\n",
    "            nn.Sequential(Conv2dTranspose(768, 384, kernel_size=3, stride=2, padding=1, output_padding=1),\n",
    "            Conv2d(384, 384, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(384, 384, kernel_size=3, stride=1, padding=1, residual=True),), # 12, 12\n",
    "\n",
    "            nn.Sequential(Conv2dTranspose(512, 256, kernel_size=3, stride=2, padding=1, output_padding=1),\n",
    "            Conv2d(256, 256, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(256, 256, kernel_size=3, stride=1, padding=1, residual=True),), # 24, 24\n",
    "\n",
    "            nn.Sequential(Conv2dTranspose(320, 128, kernel_size=3, stride=2, padding=1, output_padding=1), \n",
    "            Conv2d(128, 128, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(128, 128, kernel_size=3, stride=1, padding=1, residual=True),), # 48, 48\n",
    "\n",
    "            nn.Sequential(Conv2dTranspose(160, 64, kernel_size=3, stride=2, padding=1, output_padding=1),\n",
    "            Conv2d(64, 64, kernel_size=3, stride=1, padding=1, residual=True),\n",
    "            Conv2d(64, 64, kernel_size=3, stride=1, padding=1, residual=True),),]) # 96,96\n",
    "\n",
    "        self.output_block = nn.Sequential(Conv2d(80, 32, kernel_size=3, stride=1, padding=1),\n",
    "            nn.Conv2d(32, 3, kernel_size=1, stride=1, padding=0),\n",
    "            nn.Sigmoid()) \n",
    "\n",
    "    def forward(self, audio_sequences, face_sequences):\n",
    "        # audio_sequences = (B, T, 1, 80, 16)\n",
    "        B = audio_sequences.size(0)\n",
    "\n",
    "        input_dim_size = len(face_sequences.size())\n",
    "        if input_dim_size > 4:\n",
    "            audio_sequences = torch.cat([audio_sequences[:, i] for i in range(audio_sequences.size(1))], dim=0)\n",
    "            face_sequences = torch.cat([face_sequences[:, :, i] for i in range(face_sequences.size(2))], dim=0)\n",
    "\n",
    "        audio_embedding = self.audio_encoder(audio_sequences) # B, 512, 1, 1\n",
    "\n",
    "        feats = []\n",
    "        x = face_sequences\n",
    "        for f in self.face_encoder_blocks:\n",
    "            x = f(x)\n",
    "            feats.append(x)\n",
    "\n",
    "        x = audio_embedding\n",
    "        for f in self.face_decoder_blocks:\n",
    "            x = f(x)\n",
    "            try:\n",
    "                x = torch.cat((x, feats[-1]), dim=1)\n",
    "            except Exception as e:\n",
    "                print(x.size())\n",
    "                print(feats[-1].size())\n",
    "                raise e\n",
    "            \n",
    "            feats.pop()\n",
    "\n",
    "        x = self.output_block(x)\n",
    "\n",
    "        if input_dim_size > 4:\n",
    "            x = torch.split(x, B, dim=0) # [(B, C, H, W)]\n",
    "            outputs = torch.stack(x, dim=2) # (B, C, T, H, W)\n",
    "\n",
    "        else:\n",
    "            outputs = x\n",
    "            \n",
    "        return outputs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae42c21d",
   "metadata": {
    "papermill": {
     "duration": 13.255135,
     "end_time": "2024-10-31T10:31:21.538780",
     "exception": false,
     "start_time": "2024-10-31T10:31:08.283645",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Discriminator\n",
    "The **discriminator** is also composed of a series of convolutional neural networks. It inputs a face image and uses the face encoder to reduce its dimension to 512 dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "96ec9286",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T10:31:47.630377Z",
     "iopub.status.busy": "2024-10-31T10:31:47.629303Z",
     "iopub.status.idle": "2024-10-31T10:31:47.632123Z",
     "shell.execute_reply": "2024-10-31T10:31:47.631573Z",
     "shell.execute_reply.started": "2021-07-25T08:00:08.961755Z"
    },
    "papermill": {
     "duration": 13.076691,
     "end_time": "2024-10-31T10:31:47.632264",
     "exception": false,
     "start_time": "2024-10-31T10:31:34.555573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "###########TODO##################\n",
    "####Complete discriminator model\n",
    "class Wav2Lip_disc_qual(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Wav2Lip_disc_qual, self).__init__()\n",
    "\n",
    "        self.face_encoder_blocks = nn.ModuleList([\n",
    "            nn.Sequential(nonorm_Conv2d(3, 32, kernel_size=7, stride=1, padding=3)), # 48,96\n",
    "\n",
    "            nn.Sequential(nonorm_Conv2d(32, 64, kernel_size=5, stride=(1, 2), padding=2), # 48,48\n",
    "            nonorm_Conv2d(64, 64, kernel_size=5, stride=1, padding=2)),\n",
    "\n",
    "            nn.Sequential(nonorm_Conv2d(64, 128, kernel_size=5, stride=2, padding=2),    # 24,24\n",
    "            nonorm_Conv2d(128, 128, kernel_size=5, stride=1, padding=2)),\n",
    "\n",
    "            nn.Sequential(nonorm_Conv2d(128, 256, kernel_size=5, stride=2, padding=2),   # 12,12\n",
    "            nonorm_Conv2d(256, 256, kernel_size=5, stride=1, padding=2)),\n",
    "\n",
    "            nn.Sequential(nonorm_Conv2d(256, 512, kernel_size=3, stride=2, padding=1),       # 6,6\n",
    "            nonorm_Conv2d(512, 512, kernel_size=3, stride=1, padding=1)),\n",
    "\n",
    "            nn.Sequential(nonorm_Conv2d(512, 512, kernel_size=3, stride=2, padding=1),     # 3,3\n",
    "            nonorm_Conv2d(512, 512, kernel_size=3, stride=1, padding=1),),\n",
    "            \n",
    "            nn.Sequential(nonorm_Conv2d(512, 512, kernel_size=3, stride=1, padding=0),     # 1, 1\n",
    "            nonorm_Conv2d(512, 512, kernel_size=1, stride=1, padding=0)),])\n",
    "\n",
    "        self.binary_pred = nn.Sequential(nn.Conv2d(512, 1, kernel_size=1, stride=1, padding=0), nn.Sigmoid())\n",
    "        self.label_noise = .0\n",
    "\n",
    "    def get_lower_half(self, face_sequences):\n",
    "        return face_sequences[:, :, face_sequences.size(2)//2:]\n",
    "\n",
    "    def to_2d(self, face_sequences):\n",
    "        B = face_sequences.size(0)\n",
    "        face_sequences = torch.cat([face_sequences[:, :, i] for i in range(face_sequences.size(2))], dim=0)\n",
    "        return face_sequences\n",
    "\n",
    "    def perceptual_forward(self, false_face_sequences):\n",
    "        false_face_sequences = self.to_2d(false_face_sequences)\n",
    "        false_face_sequences = self.get_lower_half(false_face_sequences)\n",
    "\n",
    "        false_feats = false_face_sequences\n",
    "        for f in self.face_encoder_blocks:\n",
    "            false_feats = f(false_feats)\n",
    "\n",
    "        false_pred_loss = F.binary_cross_entropy(self.binary_pred(false_feats).view(len(false_feats), -1), \n",
    "                                        torch.ones((len(false_feats), 1)).cuda())\n",
    "\n",
    "        return false_pred_loss\n",
    "\n",
    "    def forward(self, face_sequences):\n",
    "        face_sequences = self.to_2d(face_sequences)\n",
    "        face_sequences = self.get_lower_half(face_sequences)\n",
    "\n",
    "        x = face_sequences\n",
    "        for f in self.face_encoder_blocks:\n",
    "            x = f(x)\n",
    "\n",
    "        return self.binary_pred(x).view(len(x), -1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d328e6c2",
   "metadata": {
    "papermill": {
     "duration": 13.249585,
     "end_time": "2024-10-31T10:32:13.935113",
     "exception": false,
     "start_time": "2024-10-31T10:32:00.685528",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3.3.2 Definition of data set\n",
    "During training, 4 data will be used:\n",
    "1. x: Input picture\n",
    "2. indiv_mels: mel-spectrogram features of the speech corresponding to each picture\n",
    "3. mel: 200ms speech mel-spectrogram corresponding to all frames, used for SyncNet to calculate lip synchronization loss\n",
    "4. y: Real pictures corresponding to speech and lip synchronization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8bbac821",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T10:32:40.289184Z",
     "iopub.status.busy": "2024-10-31T10:32:40.288361Z",
     "iopub.status.idle": "2024-10-31T10:32:40.291719Z",
     "shell.execute_reply": "2024-10-31T10:32:40.292221Z",
     "shell.execute_reply.started": "2021-07-25T08:00:11.621386Z"
    },
    "papermill": {
     "duration": 13.140704,
     "end_time": "2024-10-31T10:32:40.292384",
     "exception": false,
     "start_time": "2024-10-31T10:32:27.151680",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "use_cuda: True\n"
     ]
    }
   ],
   "source": [
    "global_step = 0\n",
    "global_epoch = 0\n",
    "use_cuda = torch.cuda.is_available()\n",
    "print('use_cuda: {}'.format(use_cuda))\n",
    "\n",
    "syncnet_T = 5\n",
    "syncnet_mel_step_size = 16\n",
    "\n",
    "class Dataset(object):\n",
    "    def __init__(self, split):\n",
    "        self.all_videos = get_image_list(data_root, split)\n",
    "\n",
    "    def get_frame_id(self, frame):\n",
    "        return int(basename(frame).split('.')[0])\n",
    "\n",
    "    def get_window(self, start_frame):\n",
    "        start_id = self.get_frame_id(start_frame)\n",
    "        vidname = dirname(start_frame)\n",
    "\n",
    "        window_fnames = []\n",
    "        for frame_id in range(start_id, start_id + syncnet_T):\n",
    "            frame = join(vidname, '{}.jpg'.format(frame_id))\n",
    "            if not isfile(frame):\n",
    "                return None\n",
    "            window_fnames.append(frame)\n",
    "        return window_fnames\n",
    "\n",
    "    def read_window(self, window_fnames):\n",
    "        if window_fnames is None: return None\n",
    "        window = []\n",
    "        for fname in window_fnames:\n",
    "            img = cv2.imread(fname)\n",
    "            if img is None:\n",
    "                return None\n",
    "            try:\n",
    "                img = cv2.resize(img, (hparams.img_size, hparams.img_size))\n",
    "            except Exception as e:\n",
    "                return None\n",
    "\n",
    "            window.append(img)\n",
    "\n",
    "        return window\n",
    "\n",
    "    def crop_audio_window(self, spec, start_frame):\n",
    "        if type(start_frame) == int:\n",
    "            start_frame_num = start_frame\n",
    "        else:\n",
    "            start_frame_num = self.get_frame_id(start_frame) # 0-indexing ---> 1-indexing\n",
    "        start_idx = int(80. * (start_frame_num / float(hparams.fps)))\n",
    "        \n",
    "        end_idx = start_idx + syncnet_mel_step_size\n",
    "\n",
    "        return spec[start_idx : end_idx, :]\n",
    "\n",
    "    def get_segmented_mels(self, spec, start_frame):\n",
    "        mels = []\n",
    "        assert syncnet_T == 5\n",
    "        start_frame_num = self.get_frame_id(start_frame) + 1 # 0-indexing ---> 1-indexing\n",
    "        if start_frame_num - 2 < 0: return None\n",
    "        for i in range(start_frame_num, start_frame_num + syncnet_T):\n",
    "            m = self.crop_audio_window(spec, i - 2)\n",
    "            if m.shape[0] != syncnet_mel_step_size:\n",
    "                return None\n",
    "            mels.append(m.T)\n",
    "\n",
    "        mels = np.asarray(mels)\n",
    "\n",
    "        return mels\n",
    "\n",
    "    def prepare_window(self, window):\n",
    "        # 3 x T x H x W\n",
    "        x = np.asarray(window) / 255.\n",
    "        x = np.transpose(x, (3, 0, 1, 2))\n",
    "\n",
    "        return x\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.all_videos)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        while 1:\n",
    "            idx = random.randint(0, len(self.all_videos) - 1) #Randomly select a video id\n",
    "            vidname = self.all_videos[idx]\n",
    "            img_names = list(glob(join(vidname, '*.jpg')))\n",
    "            if len(img_names) <= 3 * syncnet_T:\n",
    "                continue\n",
    "            \n",
    "            img_name = random.choice(img_names)\n",
    "            wrong_img_name = random.choice(img_names)#Randomly select frames\n",
    "            while wrong_img_name == img_name:\n",
    "                wrong_img_name = random.choice(img_names)\n",
    "\n",
    "            window_fnames = self.get_window(img_name)\n",
    "            wrong_window_fnames = self.get_window(wrong_img_name)\n",
    "            if window_fnames is None or wrong_window_fnames is None:\n",
    "                continue\n",
    "\n",
    "            window = self.read_window(window_fnames)\n",
    "            if window is None:\n",
    "                continue\n",
    "\n",
    "            wrong_window = self.read_window(wrong_window_fnames)\n",
    "            if wrong_window is None:\n",
    "                continue\n",
    "\n",
    "            try:\n",
    "                #Read audio\n",
    "                wavpath = join(vidname, \"audio.wav\")\n",
    "                wav = audio.load_wav(wavpath, hparams.sample_rate)\n",
    "                #Extract the complete mel-spectrogram\n",
    "                orig_mel = audio.melspectrogram(wav).T\n",
    "            except Exception as e:\n",
    "                continue\n",
    "            # Split mel-spectrogram\n",
    "            mel = self.crop_audio_window(orig_mel.copy(), img_name)\n",
    "            \n",
    "            if (mel.shape[0] != syncnet_mel_step_size):\n",
    "                continue\n",
    "\n",
    "            indiv_mels = self.get_segmented_mels(orig_mel.copy(), img_name)\n",
    "            if indiv_mels is None: continue\n",
    "\n",
    "            window = self.prepare_window(window)\n",
    "            y = window.copy()\n",
    "            window[:, :, window.shape[2]//2:] = 0.\n",
    "\n",
    "            wrong_window = self.prepare_window(wrong_window)\n",
    "            x = np.concatenate([window, wrong_window], axis=0)\n",
    "\n",
    "            x = torch.FloatTensor(x)\n",
    "            mel = torch.FloatTensor(mel.T).unsqueeze(0)\n",
    "            indiv_mels = torch.FloatTensor(indiv_mels).unsqueeze(1)\n",
    "            y = torch.FloatTensor(y)\n",
    "            return x, indiv_mels, mel, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ed3aa58c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T10:33:06.502446Z",
     "iopub.status.busy": "2024-10-31T10:33:06.501831Z",
     "iopub.status.idle": "2024-10-31T10:33:06.767242Z",
     "shell.execute_reply": "2024-10-31T10:33:06.768330Z",
     "shell.execute_reply.started": "2021-07-25T08:00:15.736819Z"
    },
    "papermill": {
     "duration": 13.431841,
     "end_time": "2024-10-31T10:33:06.768540",
     "exception": false,
     "start_time": "2024-10-31T10:32:53.336699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([6, 5, 96, 96])\n",
      "torch.Size([5, 1, 80, 16])\n",
      "torch.Size([1, 80, 16])\n",
      "torch.Size([3, 5, 96, 96])\n"
     ]
    }
   ],
   "source": [
    "ds=Dataset(\"train\")\n",
    "x, indiv_mels, mel, y=ds[0]\n",
    "print(x.shape)\n",
    "print(indiv_mels.shape)\n",
    "print(mel.shape)\n",
    "print(y.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ed57437",
   "metadata": {
    "papermill": {
     "duration": 13.082101,
     "end_time": "2024-10-31T10:33:33.067174",
     "exception": false,
     "start_time": "2024-10-31T10:33:19.985073",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3.3.3 Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9c859516",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T10:33:59.343063Z",
     "iopub.status.busy": "2024-10-31T10:33:59.321279Z",
     "iopub.status.idle": "2024-10-31T10:33:59.508963Z",
     "shell.execute_reply": "2024-10-31T10:33:59.508339Z",
     "shell.execute_reply.started": "2021-07-25T08:00:17.791703Z"
    },
    "papermill": {
     "duration": 13.37605,
     "end_time": "2024-10-31T10:33:59.509100",
     "exception": false,
     "start_time": "2024-10-31T10:33:46.133050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#bce Cross Entropy\n",
    "logloss = nn.BCELoss()\n",
    "def cosine_loss(a, v, y):\n",
    "    d = nn.functional.cosine_similarity(a, v)\n",
    "    loss = logloss(d.unsqueeze(1), y)\n",
    "\n",
    "    return loss\n",
    "\n",
    "device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n",
    "syncnet = SyncNet().to(device) #Define syncnet model\n",
    "for p in syncnet.parameters():\n",
    "    p.requires_grad = False\n",
    "\n",
    "    \n",
    "#####L1 loss    \n",
    "recon_loss = nn.L1Loss()\n",
    "def get_sync_loss(mel, g):\n",
    "    g = g[:, :, :, g.size(3)//2:]\n",
    "    g = torch.cat([g[:, :, i] for i in range(syncnet_T)], dim=1)\n",
    "    # B, 3 * T, H//2, W\n",
    "    a, v = syncnet(mel, g)\n",
    "    y = torch.ones(g.size(0), 1).float().to(device)\n",
    "    return cosine_loss(a, v, y)\n",
    "\n",
    "def train(device, model, disc, train_data_loader, test_data_loader, optimizer, disc_optimizer,\n",
    "          checkpoint_dir=None, checkpoint_interval=None, nepochs=None):\n",
    "    global global_step, global_epoch\n",
    "    resumed_step = global_step\n",
    "\n",
    "    while global_epoch < nepochs:\n",
    "        print('Starting Epoch: {}'.format(global_epoch))\n",
    "        running_sync_loss, running_l1_loss, disc_loss, running_perceptual_loss = 0., 0., 0., 0.\n",
    "        running_disc_real_loss, running_disc_fake_loss = 0., 0.\n",
    "        prog_bar = tqdm(enumerate(train_data_loader))\n",
    "        for step, (x, indiv_mels, mel, gt) in prog_bar:\n",
    "            disc.train()\n",
    "            model.train()\n",
    "\n",
    "            x = x.to(device)\n",
    "            mel = mel.to(device)\n",
    "            indiv_mels = indiv_mels.to(device)\n",
    "            gt = gt.to(device)\n",
    "\n",
    "            ### Train generator now. Remove ALL grads. \n",
    "            #Training generator\n",
    "            optimizer.zero_grad()\n",
    "            disc_optimizer.zero_grad()\n",
    "\n",
    "            g = model(indiv_mels, x)#Get the generated results\n",
    "\n",
    "            if hparams.syncnet_wt > 0.:\n",
    "                sync_loss = get_sync_loss(mel, g)# Obtain the lip synchronization loss from the pre-trained expert model\n",
    "            else:\n",
    "                sync_loss = 0.\n",
    "\n",
    "            if hparams.disc_wt > 0.:\n",
    "                perceptual_loss = disc.perceptual_forward(g)#Perceptual loss of the discriminator\n",
    "            else:\n",
    "                perceptual_loss = 0.\n",
    "\n",
    "            l1loss = recon_loss(g, gt)#l1 loss, reconstruction loss\n",
    "            \n",
    "            #Final loss function\n",
    "            loss = hparams.syncnet_wt * sync_loss + hparams.disc_wt * perceptual_loss + \\\n",
    "                                    (1. - hparams.syncnet_wt - hparams.disc_wt) * l1loss\n",
    "\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "\n",
    "            ### Remove all gradients before Training disc\n",
    "            # Train the discriminator\n",
    "            disc_optimizer.zero_grad()\n",
    "\n",
    "            pred = disc(gt)\n",
    "            disc_real_loss = F.binary_cross_entropy(pred, torch.ones((len(pred), 1)).to(device))\n",
    "            disc_real_loss.backward()\n",
    "\n",
    "            pred = disc(g.detach())\n",
    "            disc_fake_loss = F.binary_cross_entropy(pred, torch.zeros((len(pred), 1)).to(device))\n",
    "            disc_fake_loss.backward()\n",
    "\n",
    "            disc_optimizer.step()\n",
    "\n",
    "            running_disc_real_loss += disc_real_loss.item()\n",
    "            running_disc_fake_loss += disc_fake_loss.item()\n",
    "\n",
    "            # Logs\n",
    "            global_step += 1\n",
    "            cur_session_steps = global_step - resumed_step\n",
    "\n",
    "            running_l1_loss += l1loss.item()\n",
    "            if hparams.syncnet_wt > 0.:\n",
    "                running_sync_loss += sync_loss.item()\n",
    "            else:\n",
    "                running_sync_loss += 0.\n",
    "\n",
    "            if hparams.disc_wt > 0.:\n",
    "                running_perceptual_loss += perceptual_loss.item()\n",
    "            else:\n",
    "                running_perceptual_loss += 0.\n",
    "\n",
    "            if global_step == 1 or global_step % checkpoint_interval == 0:\n",
    "                save_checkpoint(\n",
    "                    model, optimizer, global_step, checkpoint_dir, global_epoch)\n",
    "                save_checkpoint(disc, disc_optimizer, global_step, checkpoint_dir, global_epoch, prefix='disc_')\n",
    "\n",
    "\n",
    "            if global_step % hparams.eval_interval == 0:\n",
    "                with torch.no_grad():\n",
    "                    average_sync_loss = eval_model(test_data_loader, global_step, device, model, disc)\n",
    "\n",
    "                    if average_sync_loss < .75:\n",
    "                        hparams.set_hparam('syncnet_wt', 0.03)\n",
    "\n",
    "            prog_bar.set_description('L1: {}, Sync: {}, Percep: {} | Fake: {}, Real: {}'.format(running_l1_loss / (step + 1),\n",
    "                                                                                        running_sync_loss / (step + 1),\n",
    "                                                                                        running_perceptual_loss / (step + 1),\n",
    "                                                                                        running_disc_fake_loss / (step + 1),\n",
    "                                                                                        running_disc_real_loss / (step + 1)))\n",
    "\n",
    "        global_epoch += 1\n",
    "\n",
    "def eval_model(test_data_loader, global_step, device, model, disc):\n",
    "    eval_steps = 300\n",
    "    print('Evaluating for {} steps'.format(eval_steps))\n",
    "    running_sync_loss, running_l1_loss, running_disc_real_loss, running_disc_fake_loss, running_perceptual_loss = [], [], [], [], []\n",
    "    while 1:\n",
    "        for step, (x, indiv_mels, mel, gt) in enumerate((test_data_loader)):\n",
    "            model.eval()\n",
    "            disc.eval()\n",
    "\n",
    "            x = x.to(device)\n",
    "            mel = mel.to(device)\n",
    "            indiv_mels = indiv_mels.to(device)\n",
    "            gt = gt.to(device)\n",
    "\n",
    "            pred = disc(gt)\n",
    "            disc_real_loss = F.binary_cross_entropy(pred, torch.ones((len(pred), 1)).to(device))\n",
    "\n",
    "            g = model(indiv_mels, x)\n",
    "            pred = disc(g)\n",
    "            disc_fake_loss = F.binary_cross_entropy(pred, torch.zeros((len(pred), 1)).to(device))\n",
    "\n",
    "            running_disc_real_loss.append(disc_real_loss.item())\n",
    "            running_disc_fake_loss.append(disc_fake_loss.item())\n",
    "\n",
    "            sync_loss = get_sync_loss(mel, g)\n",
    "            \n",
    "            if hparams.disc_wt > 0.:\n",
    "                perceptual_loss = disc.perceptual_forward(g)\n",
    "            else:\n",
    "                perceptual_loss = 0.\n",
    "\n",
    "            l1loss = recon_loss(g, gt)\n",
    "\n",
    "            loss = hparams.syncnet_wt * sync_loss + hparams.disc_wt * perceptual_loss + \\\n",
    "                                    (1. - hparams.syncnet_wt - hparams.disc_wt) * l1loss\n",
    "\n",
    "            running_l1_loss.append(l1loss.item())\n",
    "            running_sync_loss.append(sync_loss.item())\n",
    "            \n",
    "            if hparams.disc_wt > 0.:\n",
    "                running_perceptual_loss.append(perceptual_loss.item())\n",
    "            else:\n",
    "                running_perceptual_loss.append(0.)\n",
    "\n",
    "            if step > eval_steps: break\n",
    "\n",
    "        print('L1: {}, Sync: {}, Percep: {} | Fake: {}, Real: {}'.format(sum(running_l1_loss) / len(running_l1_loss),\n",
    "                                                            sum(running_sync_loss) / len(running_sync_loss),\n",
    "                                                            sum(running_perceptual_loss) / len(running_perceptual_loss),\n",
    "                                                            sum(running_disc_fake_loss) / len(running_disc_fake_loss),\n",
    "                                                             sum(running_disc_real_loss) / len(running_disc_real_loss)))\n",
    "        return sum(running_sync_loss) / len(running_sync_loss)\n",
    "\n",
    "latest_wav2lip_checkpoint = ''\n",
    "def save_checkpoint(model, optimizer, step, checkpoint_dir, epoch, prefix=''):\n",
    "    global latest_wav2lip_checkpoint\n",
    "    checkpoint_path = join(\n",
    "        checkpoint_dir, \"{}checkpoint_step{:09d}.pth\".format(prefix, global_step))\n",
    "    if 'disc' not in checkpoint_path:\n",
    "        latest_wav2lip_checkpoint = checkpoint_path\n",
    "    optimizer_state = optimizer.state_dict() if hparams.save_optimizer_state else None\n",
    "    torch.save({\n",
    "        \"state_dict\": model.state_dict(),\n",
    "        \"optimizer\": optimizer_state,\n",
    "        \"global_step\": step,\n",
    "        \"global_epoch\": epoch,\n",
    "    }, checkpoint_path)\n",
    "    print(\"Saved checkpoint:\", checkpoint_path)\n",
    "\n",
    "def _load(checkpoint_path):\n",
    "    if use_cuda:\n",
    "        checkpoint = torch.load(checkpoint_path)\n",
    "    else:\n",
    "        checkpoint = torch.load(checkpoint_path,\n",
    "                                map_location=lambda storage, loc: storage)\n",
    "    return checkpoint\n",
    "\n",
    "\n",
    "def load_checkpoint(path, model, optimizer, reset_optimizer=False, overwrite_global_states=True):\n",
    "    global global_step\n",
    "    global global_epoch\n",
    "\n",
    "    print(\"Load checkpoint from: {}\".format(path))\n",
    "    checkpoint = _load(path)\n",
    "    s = checkpoint[\"state_dict\"]\n",
    "    new_s = {}\n",
    "    for k, v in s.items():\n",
    "        new_s[k.replace('module.', '')] = v\n",
    "    model.load_state_dict(new_s)\n",
    "    if not reset_optimizer:\n",
    "        optimizer_state = checkpoint[\"optimizer\"]\n",
    "        if optimizer_state is not None:\n",
    "            print(\"Load optimizer state from {}\".format(path))\n",
    "            optimizer.load_state_dict(checkpoint[\"optimizer\"])\n",
    "    if overwrite_global_states:\n",
    "        global_step = checkpoint[\"global_step\"]\n",
    "        global_epoch = checkpoint[\"global_epoch\"]\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5e6f0c5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T10:34:25.660929Z",
     "iopub.status.busy": "2024-10-31T10:34:25.659996Z",
     "iopub.status.idle": "2024-10-31T15:29:15.438057Z",
     "shell.execute_reply": "2024-10-31T15:29:15.437380Z",
     "shell.execute_reply.started": "2021-07-25T08:01:08.453052Z"
    },
    "papermill": {
     "duration": 17702.85683,
     "end_time": "2024-10-31T15:29:15.438215",
     "exception": false,
     "start_time": "2024-10-31T10:34:12.581385",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total trainable params 36298035\n",
      "total DISC trainable params 14113793\n",
      "Load checkpoint from: /kaggle/working/expert_checkpoints/checkpoint_step000080000.pth\n",
      "Starting Epoch: 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "0it [00:00, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved checkpoint: /kaggle/working/wav2lip_checkpoints/checkpoint_step000000001.pth\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "L1: 0.17785879969596863, Sync: 0.0, Percep: 0.674405574798584 | Fake: 0.7122467756271362, Real: 0.6744054555892944: : 1it [00:14, 14.78s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved checkpoint: /kaggle/working/wav2lip_checkpoints/disc_checkpoint_step000000001.pth\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "L1: 0.04380322559289699, Sync: 0.0, Percep: 0.007973609107951219 | Fake: 98.9946697362788, Real: 0.007327617650256731: : 2865it [58:00,  1.21s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting Epoch: 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "L1: 0.03812103558665336, Sync: 0.0, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 134it [02:53,  1.19s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved checkpoint: /kaggle/working/wav2lip_checkpoints/checkpoint_step000003000.pth\n",
      "Saved checkpoint: /kaggle/working/wav2lip_checkpoints/disc_checkpoint_step000003000.pth\n",
      "Evaluating for 300 steps\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "L1: 0.038066266007997375, Sync: 0.0, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 135it [03:36, 13.72s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "L1: 0.03235137517399648, Sync: 0.9003606061725056, Percep: 0.0 | Fake: 100.0, Real: 0.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "L1: 0.0363935572197612, Sync: 0.0, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 2865it [58:26,  1.22s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting Epoch: 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "L1: 0.03490750668881994, Sync: 0.0, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 269it [05:34,  1.20s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved checkpoint: /kaggle/working/wav2lip_checkpoints/checkpoint_step000006000.pth\n",
      "Saved checkpoint: /kaggle/working/wav2lip_checkpoints/disc_checkpoint_step000006000.pth\n",
      "Evaluating for 300 steps\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "L1: 0.034903241831947256, Sync: 0.0, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 270it [06:16, 13.58s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "L1: 0.0318494155893431, Sync: 0.7836025046075091, Percep: 0.0 | Fake: 100.0, Real: 0.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "L1: 0.03417859081549482, Sync: 0.0, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 2865it [58:19,  1.22s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting Epoch: 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "L1: 0.033151514754436985, Sync: 0.0, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 404it [08:18,  1.19s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved checkpoint: /kaggle/working/wav2lip_checkpoints/checkpoint_step000009000.pth\n",
      "Saved checkpoint: /kaggle/working/wav2lip_checkpoints/disc_checkpoint_step000009000.pth\n",
      "Evaluating for 300 steps\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "L1: 0.03313914563644815, Sync: 0.0, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 405it [09:03, 14.41s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "L1: 0.026806788546416688, Sync: 0.6655615699641845, Percep: 0.0 | Fake: 100.0, Real: 0.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "L1: 0.03347329240987958, Sync: 0.1670515916604438, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 2865it [59:56,  1.26s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting Epoch: 4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "L1: 0.03273164973367897, Sync: 0.16957638866107405, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 539it [11:19,  1.25s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved checkpoint: /kaggle/working/wav2lip_checkpoints/checkpoint_step000012000.pth\n",
      "Saved checkpoint: /kaggle/working/wav2lip_checkpoints/disc_checkpoint_step000012000.pth\n",
      "Evaluating for 300 steps\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "L1: 0.03273051626359423, Sync: 0.1696748599823978, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 540it [12:03, 14.02s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "L1: 0.026331134003532285, Sync: 0.17011118570671363, Percep: 0.0 | Fake: 100.0, Real: 0.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "L1: 0.03205385825630882, Sync: 0.16464668452271616, Percep: 0.0 | Fake: 100.0, Real: 0.0: : 2865it [1:00:04,  1.26s/it]\n"
     ]
    }
   ],
   "source": [
    "checkpoint_dir = \"/kaggle/working/wav2lip_checkpoints\"  #checkpoint Stored location\n",
    "\n",
    "# Dataset and Dataloader setup\n",
    "train_dataset = Dataset('train')\n",
    "test_dataset = Dataset('val')\n",
    "\n",
    "train_data_loader = data_utils.DataLoader(\n",
    "    train_dataset, batch_size=hparams.batch_size, shuffle=True,\n",
    "    num_workers=hparams.num_workers)\n",
    "\n",
    "test_data_loader = data_utils.DataLoader(\n",
    "    test_dataset, batch_size=hparams.batch_size,\n",
    "    num_workers=4)\n",
    "device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n",
    "\n",
    " # Model\n",
    "model = Wav2Lip().to(device)####### generator model\n",
    "disc = Wav2Lip_disc_qual().to(device)####### discriminator model\n",
    "\n",
    "print('total trainable params {}'.format(sum(p.numel() for p in model.parameters() if p.requires_grad)))\n",
    "print('total DISC trainable params {}'.format(sum(p.numel() for p in disc.parameters() if p.requires_grad)))\n",
    "\n",
    "optimizer = optim.Adam([p for p in model.parameters() if p.requires_grad],\n",
    "                       lr=hparams.initial_learning_rate,\n",
    "                       betas=(0.5, 0.999))#####adam optimizer，betas=[0.5,0.999]\n",
    "disc_optimizer = optim.Adam([p for p in disc.parameters() if p.requires_grad],\n",
    "                            lr=hparams.disc_initial_learning_rate,\n",
    "                            betas=(0.5, 0.999))#####adam optimizer，betas=[0.5,0.999]\n",
    "\n",
    "#The checkpoint position of the generator that continues training\n",
    "# checkpoint_path=\"\"\n",
    "# load_checkpoint(checkpoint_path, model, optimizer, reset_optimizer=False)\n",
    "#The checkpoint position of the discriminator that continues training\n",
    "# disc_checkpoint_path=\"\"\n",
    "# load_checkpoint(disc_checkpoint_path, disc, disc_optimizer, \n",
    "#                             reset_optimizer=False, overwrite_global_states=False)\n",
    "\n",
    "# The checkpoint position of syncnet, we will use this model to calculate the lip synchronization loss of the generated frames and speech\n",
    "syncnet_checkpoint_path = latest_checkpoint_path\n",
    "# syncnet_checkpoint_path=\"/kaggle/working/expert_checkpoints/checkpoint_step000000001.pth\"\n",
    "load_checkpoint(syncnet_checkpoint_path, syncnet, None, reset_optimizer=True,\n",
    "                            overwrite_global_states=False)\n",
    "\n",
    "if not os.path.exists(checkpoint_dir):\n",
    "    os.mkdir(checkpoint_dir)\n",
    "\n",
    "# Train!\n",
    "train(device, model, disc, train_data_loader, test_data_loader, optimizer, disc_optimizer,\n",
    "          checkpoint_dir=checkpoint_dir,\n",
    "          checkpoint_interval=hparams.checkpoint_interval,\n",
    "          nepochs=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab6c023d",
   "metadata": {
    "papermill": {
     "duration": 22.318527,
     "end_time": "2024-10-31T15:30:00.206360",
     "exception": false,
     "start_time": "2024-10-31T15:29:37.887833",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3.3.4 Command line training\n",
    "The above is the step-by-step training process. The above process has been encapsulated in the `hq_wav2lip_train.py` file. You can directly train through the following command"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d1b28213",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T15:30:44.728410Z",
     "iopub.status.busy": "2024-10-31T15:30:44.727439Z",
     "iopub.status.idle": "2024-10-31T15:30:44.730315Z",
     "shell.execute_reply": "2024-10-31T15:30:44.729668Z"
    },
    "papermill": {
     "duration": 22.353717,
     "end_time": "2024-10-31T15:30:44.730451",
     "exception": false,
     "start_time": "2024-10-31T15:30:22.376734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !python wav2lip_train.py --data_root lrs2_preprocessed/ --checkpoint_dir <folder_to_save_checkpoints> --syncnet_checkpoint_path <path_to_expert_disc_checkpoint>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82e2577a",
   "metadata": {
    "papermill": {
     "duration": 22.187786,
     "end_time": "2024-10-31T15:31:29.180073",
     "exception": false,
     "start_time": "2024-10-31T15:31:06.992287",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 4. Model inference\n",
    "After the model is trained, we only use the network model part of the generator as our inference model. The input to the model consists of a reference video containing a human face and a speech segment.  \n",
    "Here we can directly use the pre-trained model **[weight](https://iiitaphyd-my.sharepoint.com/:u:/g/personal/radrabha_m_research_iiit_ac_in/EdjI7bZlgApMqsVoEUUXpLsBxqXbn5z8VTmoxp55YNDcIA?e=n9ljGW)** to download the model and Place it in the designated folder for subsequent reasoning.  \n",
    "The inference process of the model is mainly divided into the following steps:\n",
    "1. Preprocessing of input data, including face cutout, video frame splitting, mel-spectrogram feature extraction and other operations.\n",
    "2. Use the network model to generate lip synchronized video frames.\n",
    "3. Convert the generated video frame to video and combine it with the input voice to form the final output video."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6c42a039",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T15:32:13.631572Z",
     "iopub.status.busy": "2024-10-31T15:32:13.630747Z",
     "iopub.status.idle": "2024-10-31T15:32:13.685881Z",
     "shell.execute_reply": "2024-10-31T15:32:13.685390Z",
     "shell.execute_reply.started": "2021-07-24T13:57:11.710238Z"
    },
    "papermill": {
     "duration": 22.392865,
     "end_time": "2024-10-31T15:32:13.686052",
     "exception": false,
     "start_time": "2024-10-31T15:31:51.293187",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from os import listdir, path\n",
    "import numpy as np\n",
    "import scipy, cv2, os, sys, argparse, audio\n",
    "import json, subprocess, random, string\n",
    "from tqdm import tqdm\n",
    "from glob import glob\n",
    "import torch, face_detection\n",
    "from models import Wav2Lip\n",
    "import platform\n",
    "import audio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8733df67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T15:32:58.226564Z",
     "iopub.status.busy": "2024-10-31T15:32:58.225931Z",
     "iopub.status.idle": "2024-10-31T15:32:58.228865Z",
     "shell.execute_reply": "2024-10-31T15:32:58.228261Z",
     "shell.execute_reply.started": "2021-07-24T13:59:02.638662Z"
    },
    "papermill": {
     "duration": 22.170558,
     "end_time": "2024-10-31T15:32:58.229006",
     "exception": false,
     "start_time": "2024-10-31T15:32:36.058448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "checkpoint_path=\"/kaggle/working/wav2lip_checkpoints/checkpoint_step000000001.pth\"#Checkpoint location of the generator\n",
    "checkpoint_path = latest_wav2lip_checkpoint\n",
    "face=\"input_video.mp4\" #Refer to the file location of the video, *.mp4\n",
    "speech=\"input_audio.wav\"#Input the position of the speech, *.wav\n",
    "resize_factor=1 #The ratio of downsampling the input video\n",
    "crop=[0,-1,0,-1] #Whether to crop the video frame, useful when processing multiple faces in the video\n",
    "fps=25#Video frame rate\n",
    "static=False #Whether to use only a fixed frame as a reference for video generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3f38bcba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T15:33:42.998133Z",
     "iopub.status.busy": "2024-10-31T15:33:42.997471Z",
     "iopub.status.idle": "2024-10-31T15:33:43.344036Z",
     "shell.execute_reply": "2024-10-31T15:33:43.343403Z",
     "shell.execute_reply.started": "2021-07-24T13:59:14.496913Z"
    },
    "papermill": {
     "duration": 22.659888,
     "end_time": "2024-10-31T15:33:43.344171",
     "exception": false,
     "start_time": "2024-10-31T15:33:20.684283",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reading video frames...\n",
      "Number of frames available for inference: 210\n"
     ]
    }
   ],
   "source": [
    "if not os.path.isfile(face):\n",
    "    raise ValueError('--face argument must be a valid path to video/image file')\n",
    "\n",
    "\n",
    "else:# If the input is video format\n",
    "    video_stream = cv2.VideoCapture(face)# Read video\n",
    "    fps = video_stream.get(cv2.CAP_PROP_FPS)# Read fps\n",
    "\n",
    "    print('Reading video frames...')\n",
    "\n",
    "    full_frames = []\n",
    "    #Extract all frames\n",
    "    while 1:\n",
    "        still_reading, frame = video_stream.read()\n",
    "        if not still_reading:\n",
    "            video_stream.release()\n",
    "            break\n",
    "        if resize_factor > 1: # Perform downsampling and reduce resolution\n",
    "            frame = cv2.resize(frame, (frame.shape[1]//resize_factor, frame.shape[0]//resize_factor))\n",
    "\n",
    "        \n",
    "\n",
    "        y1, y2, x1, x2 =crop # Crop\n",
    "        if x2 == -1: x2 = frame.shape[1]\n",
    "        if y2 == -1: y2 = frame.shape[0]\n",
    "\n",
    "        frame = frame[y1:y2, x1:x2]\n",
    "\n",
    "        full_frames.append(frame)\n",
    "\n",
    "print (\"Number of frames available for inference: \"+str(len(full_frames)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7f8a0b8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T15:34:27.748151Z",
     "iopub.status.busy": "2024-10-31T15:34:27.747539Z",
     "iopub.status.idle": "2024-10-31T15:34:28.481890Z",
     "shell.execute_reply": "2024-10-31T15:34:28.480890Z",
     "shell.execute_reply.started": "2021-07-24T13:59:29.319841Z"
    },
    "papermill": {
     "duration": 22.904007,
     "end_time": "2024-10-31T15:34:28.482143",
     "exception": false,
     "start_time": "2024-10-31T15:34:05.578136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(80, 353)\n"
     ]
    }
   ],
   "source": [
    "#Check whether the input audio is in .wav format, if not, convert it\n",
    "if not speech.endswith('.wav'):\n",
    "    print('Extracting raw audio...')\n",
    "    command = 'ffmpeg -y -i {} -strict -2 {}'.format(speech, 'temp/temp.wav')\n",
    "\n",
    "    subprocess.call(command, shell=True)\n",
    "    speech = 'temp/temp.wav'\n",
    "\n",
    "wav = audio.load_wav(speech, 16000)#Guaranteed sampling rate of 16000\n",
    "mel = audio.melspectrogram(wav)\n",
    "print(mel.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4c107f45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T15:35:13.451977Z",
     "iopub.status.busy": "2024-10-31T15:35:13.451107Z",
     "iopub.status.idle": "2024-10-31T15:35:13.455121Z",
     "shell.execute_reply": "2024-10-31T15:35:13.454594Z",
     "shell.execute_reply.started": "2021-07-24T13:59:40.598345Z"
    },
    "papermill": {
     "duration": 22.477965,
     "end_time": "2024-10-31T15:35:13.455252",
     "exception": false,
     "start_time": "2024-10-31T15:34:50.977287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of mel chunks: 128\n"
     ]
    }
   ],
   "source": [
    "wav2lip_batch_size=128 #The batchsize input to the network during inference\n",
    "mel_step_size=16\n",
    "\n",
    "#Extract mel spectrum of speech\n",
    "mel_chunks = []\n",
    "mel_idx_multiplier = 80./fps \n",
    "i = 0\n",
    "while 1:\n",
    "    start_idx = int(i * mel_idx_multiplier)\n",
    "    if start_idx + mel_step_size > len(mel[0]):\n",
    "        mel_chunks.append(mel[:, len(mel[0]) - mel_step_size:])\n",
    "        break\n",
    "    mel_chunks.append(mel[:, start_idx : start_idx + mel_step_size])\n",
    "    i += 1\n",
    "\n",
    "print(\"Length of mel chunks: {}\".format(len(mel_chunks)))\n",
    "\n",
    "full_frames = full_frames[:len(mel_chunks)]\n",
    "\n",
    "batch_size = wav2lip_batch_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "df1293f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T15:35:57.914940Z",
     "iopub.status.busy": "2024-10-31T15:35:57.909333Z",
     "iopub.status.idle": "2024-10-31T15:35:57.918426Z",
     "shell.execute_reply": "2024-10-31T15:35:57.917870Z",
     "shell.execute_reply.started": "2021-07-24T13:59:59.813928Z"
    },
    "papermill": {
     "duration": 22.34816,
     "end_time": "2024-10-31T15:35:57.918557",
     "exception": false,
     "start_time": "2024-10-31T15:35:35.570397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using cuda for inference.\n"
     ]
    }
   ],
   "source": [
    "img_size = 96 #Default input image size\n",
    "pads=[0,20,0,0] # The length of the padding ensures that the chin is within the cutout range\n",
    "nosmooth=False\n",
    "face_det_batch_size=16\n",
    "\n",
    "def get_smoothened_boxes(boxes, T):\n",
    "    for i in range(len(boxes)):\n",
    "        if i + T > len(boxes):\n",
    "            window = boxes[len(boxes) - T:]\n",
    "        else:\n",
    "            window = boxes[i : i + T]\n",
    "        boxes[i] = np.mean(window, axis=0)\n",
    "    return boxes\n",
    "\n",
    "#Face detection function\n",
    "def face_detect(images):\n",
    "    detector = face_detection.FaceAlignment(face_detection.LandmarksType._2D, \n",
    "                                            flip_input=False, device=device)\n",
    "\n",
    "    batch_size = face_det_batch_size\n",
    "\n",
    "    while 1:\n",
    "        predictions = []\n",
    "        try:\n",
    "            for i in tqdm(range(0, len(images), batch_size)):\n",
    "                predictions.extend(detector.get_detections_for_batch(np.array(images[i:i + batch_size])))\n",
    "        except RuntimeError:\n",
    "            if batch_size == 1: \n",
    "                raise RuntimeError('Image too big to run face detection on GPU. Please use the --resize_factor argument')\n",
    "            batch_size //= 2\n",
    "            print('Recovering from OOM error; New batch size: {}'.format(batch_size))\n",
    "            continue\n",
    "        break\n",
    "\n",
    "    results = []\n",
    "    pady1, pady2, padx1, padx2 = pads\n",
    "    for rect, image in zip(predictions, images):\n",
    "        if rect is None:\n",
    "            cv2.imwrite('temp/faulty_frame.jpg', image) # check this frame where the face was not detected.\n",
    "            raise ValueError('Face not detected! Ensure the video contains a face in all the frames.')\n",
    "\n",
    "        y1 = max(0, rect[1] - pady1)\n",
    "        y2 = min(image.shape[0], rect[3] + pady2)\n",
    "        x1 = max(0, rect[0] - padx1)\n",
    "        x2 = min(image.shape[1], rect[2] + padx2)\n",
    "\n",
    "        results.append([x1, y1, x2, y2])\n",
    "\n",
    "    boxes = np.array(results)\n",
    "    if not nosmooth: boxes = get_smoothened_boxes(boxes, T=5)\n",
    "    results = [[image[y1: y2, x1:x2], (y1, y2, x1, x2)] for image, (x1, y1, x2, y2) in zip(images, boxes)]\n",
    "\n",
    "    del detector\n",
    "    return results \n",
    "\n",
    "box=[-1,-1,-1,-1]\n",
    "\n",
    "def datagen(frames, mels):\n",
    "    img_batch, mel_batch, frame_batch, coords_batch = [], [], [], []\n",
    "\n",
    "    if box[0] == -1:# If no specific face boundaries are specified\n",
    "        if not static:# Whether to use the first frame of the video as a reference\n",
    "            face_det_results = face_detect(frames) # BGR2RGB for CNN face detection\n",
    "        else:\n",
    "            face_det_results = face_detect([frames[0]])\n",
    "    else:\n",
    "        print('Using the specified bounding box instead of face detection...')\n",
    "        y1, y2, x1, x2 = box\n",
    "        face_det_results = [[f[y1: y2, x1:x2], (y1, y2, x1, x2)] for f in frames] # Crop the face result\n",
    "\n",
    "    for i, m in enumerate(mels):\n",
    "        idx = 0 if static else i%len(frames)\n",
    "        frame_to_save = frames[idx].copy()\n",
    "        face, coords = face_det_results[idx].copy()\n",
    "\n",
    "        face = cv2.resize(face, (img_size, img_size)) # Resample to specified size\n",
    "\n",
    "        img_batch.append(face)\n",
    "        mel_batch.append(m)\n",
    "        frame_batch.append(frame_to_save)\n",
    "        coords_batch.append(coords)\n",
    "\n",
    "        if len(img_batch) >= wav2lip_batch_size:\n",
    "            img_batch, mel_batch = np.asarray(img_batch), np.asarray(mel_batch)\n",
    "\n",
    "            img_masked = img_batch.copy()\n",
    "            img_masked[:, img_size//2:] = 0\n",
    "\n",
    "            img_batch = np.concatenate((img_masked, img_batch), axis=3) / 255.\n",
    "            mel_batch = np.reshape(mel_batch, [len(mel_batch), mel_batch.shape[1], mel_batch.shape[2], 1])\n",
    "\n",
    "            yield img_batch, mel_batch, frame_batch, coords_batch\n",
    "            img_batch, mel_batch, frame_batch, coords_batch = [], [], [], []\n",
    "\n",
    "    if len(img_batch) > 0:\n",
    "        img_batch, mel_batch = np.asarray(img_batch), np.asarray(mel_batch)\n",
    "\n",
    "        img_masked = img_batch.copy()\n",
    "        img_masked[:, img_size//2:] = 0\n",
    "\n",
    "        img_batch = np.concatenate((img_masked, img_batch), axis=3) / 255.\n",
    "        mel_batch = np.reshape(mel_batch, [len(mel_batch), mel_batch.shape[1], mel_batch.shape[2], 1])\n",
    "\n",
    "        yield img_batch, mel_batch, frame_batch, coords_batch\n",
    "\n",
    "mel_step_size = 16 \n",
    "device = 'cuda' if torch.cuda.is_available() else 'cpu'\n",
    "print('Using {} for inference.'.format(device))\n",
    "\n",
    "\n",
    "#Load model\n",
    "def _load(checkpoint_path):\n",
    "    if device == 'cuda':\n",
    "        checkpoint = torch.load(checkpoint_path)\n",
    "    else:\n",
    "        checkpoint = torch.load(checkpoint_path,\n",
    "                                map_location=lambda storage, loc: storage)\n",
    "    return checkpoint\n",
    "\n",
    "def load_model(path):\n",
    "    model = Wav2Lip()\n",
    "    print(\"Load checkpoint from: {}\".format(path))\n",
    "    checkpoint = _load(path)\n",
    "    s = checkpoint[\"state_dict\"]\n",
    "    new_s = {}\n",
    "    for k, v in s.items():\n",
    "        new_s[k.replace('module.', '')] = v\n",
    "    model.load_state_dict(new_s)\n",
    "\n",
    "    model = model.to(device)\n",
    "    return model.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "249a72a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T15:36:42.375102Z",
     "iopub.status.busy": "2024-10-31T15:36:42.374151Z",
     "iopub.status.idle": "2024-10-31T15:36:42.377000Z",
     "shell.execute_reply": "2024-10-31T15:36:42.376457Z"
    },
    "papermill": {
     "duration": 22.121223,
     "end_time": "2024-10-31T15:36:42.377133",
     "exception": false,
     "start_time": "2024-10-31T15:36:20.255910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "os.mkdir('/kaggle/working/temp/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "62589210",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T15:37:27.082394Z",
     "iopub.status.busy": "2024-10-31T15:37:27.081701Z",
     "iopub.status.idle": "2024-10-31T15:37:43.093789Z",
     "shell.execute_reply": "2024-10-31T15:37:43.093184Z",
     "shell.execute_reply.started": "2021-07-24T14:00:13.510341Z"
    },
    "papermill": {
     "duration": 38.316679,
     "end_time": "2024-10-31T15:37:43.093949",
     "exception": false,
     "start_time": "2024-10-31T15:37:04.777270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1 [00:00<?, ?it/s]\n",
      "  0%|          | 0/8 [00:00<?, ?it/s]\u001b[A\n",
      " 12%|█▎        | 1/8 [00:03<00:25,  3.61s/it]\u001b[A\n",
      " 25%|██▌       | 2/8 [00:04<00:13,  2.23s/it]\u001b[A\n",
      " 38%|███▊      | 3/8 [00:06<00:09,  1.80s/it]\u001b[A\n",
      " 50%|█████     | 4/8 [00:07<00:06,  1.60s/it]\u001b[A\n",
      " 62%|██████▎   | 5/8 [00:08<00:04,  1.51s/it]\u001b[A\n",
      " 75%|███████▌  | 6/8 [00:10<00:02,  1.44s/it]\u001b[A\n",
      " 88%|████████▊ | 7/8 [00:11<00:01,  1.40s/it]\u001b[A\n",
      "100%|██████████| 8/8 [00:12<00:00,  1.59s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Load checkpoint from: /kaggle/working/wav2lip_checkpoints/checkpoint_step000012000.pth\n",
      "Model loaded\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1/1 [00:16<00:00, 16.01s/it]\n"
     ]
    }
   ],
   "source": [
    "full_frames = full_frames[:len(mel_chunks)]\n",
    "\n",
    "batch_size = wav2lip_batch_size\n",
    "gen = datagen(full_frames.copy(), mel_chunks)  # Face cropping and splicing, 6 channels\n",
    "\n",
    "for i, (img_batch, mel_batch, frames, coords) in enumerate(tqdm(gen, \n",
    "                                        total=int(np.ceil(float(len(mel_chunks))/batch_size)))):\n",
    "    #Load model\n",
    "    if i == 0:\n",
    "        model = load_model(checkpoint_path)\n",
    "        print (\"Model loaded\")\n",
    "\n",
    "        frame_h, frame_w = full_frames[0].shape[:-1]\n",
    "        #Temporary video storage\n",
    "        out = cv2.VideoWriter('/kaggle/working/temp/result_without_audio.mp4',\n",
    "                                cv2.VideoWriter_fourcc(*'DIVX'), fps, (frame_w, frame_h))\n",
    "\n",
    "    img_batch = torch.FloatTensor(np.transpose(img_batch, (0, 3, 1, 2))).to(device)\n",
    "    mel_batch = torch.FloatTensor(np.transpose(mel_batch, (0, 3, 1, 2))).to(device)\n",
    "    \n",
    "    \n",
    "    ##### Send img_batch, mel_batch into the model to get pred\n",
    "    ##############TODO##############\n",
    "    with torch.no_grad():\n",
    "        pred = model(mel_batch, img_batch)\n",
    "    \n",
    "    pred = pred.cpu().numpy().transpose(0, 2, 3, 1) * 255.\n",
    "\n",
    "    for p, f, c in zip(pred, frames, coords):\n",
    "        y1, y2, x1, x2 = c\n",
    "        p = cv2.resize(p.astype(np.uint8), (x2 - x1, y2 - y1))\n",
    "\n",
    "        f[y1:y2, x1:x2] = p\n",
    "        out.write(f)\n",
    "\n",
    "out.release()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "abc9a098",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T15:38:27.758964Z",
     "iopub.status.busy": "2024-10-31T15:38:27.758238Z",
     "iopub.status.idle": "2024-10-31T15:38:27.761035Z",
     "shell.execute_reply": "2024-10-31T15:38:27.760396Z"
    },
    "papermill": {
     "duration": 22.263049,
     "end_time": "2024-10-31T15:38:27.761167",
     "exception": false,
     "start_time": "2024-10-31T15:38:05.498118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "os.mkdir('/kaggle/working/result/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8c628e0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-31T15:39:12.528909Z",
     "iopub.status.busy": "2024-10-31T15:39:12.527853Z",
     "iopub.status.idle": "2024-10-31T15:39:13.997957Z",
     "shell.execute_reply": "2024-10-31T15:39:13.997426Z",
     "shell.execute_reply.started": "2021-07-24T14:01:22.990563Z"
    },
    "papermill": {
     "duration": 23.894885,
     "end_time": "2024-10-31T15:39:13.998105",
     "exception": false,
     "start_time": "2024-10-31T15:38:50.103220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Merge generated video with speech\n",
    "outfile=\"/kaggle/working/result/result.mp4\"# The final output results are placed in this folder.\n",
    "command = 'ffmpeg -y -i {} -i {} -strict -2 -q:v 1 {}'.format(speech, '/kaggle/working/temp/result_without_audio.mp4',outfile)\n",
    "subprocess.call(command, shell=platform.system() != 'Windows')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 1480682,
     "sourceId": 2446822,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1486947,
     "sourceId": 2456654,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1506511,
     "sourceId": 2488763,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30121,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 26506.406743,
   "end_time": "2024-10-31T15:39:38.120847",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-31T08:17:51.714104",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
